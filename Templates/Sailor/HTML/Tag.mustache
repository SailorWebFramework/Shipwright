// This file was autogenerated by Shipwright. DO NOT CHANGE.
//
//  {{ctag}}.swift
//
//  Created by Joshua Davis.
//

import Foundation
import Sailboat
import SailorShared

#if os(WASI)
import SailorWeb
#else
// if any other target are created
#endif

/// {{description}}
public struct {{ctag}}: BodyElement {
    /// name of the html tag associated with this type
    public static var name: String { "{{tag}}" }

    /// unique identifier for this html element
    public var id: ElementID

    /// attributes associated with this type
    public var attributes: [String: () -> String]

    /// events associated with this type
    public var events: [String: (EventResult) -> Void]

    /// content that is contained by this html element
    public var content: () -> any Fragment

    public var renderer: any Renderable

        internal init(bodyValue: (() -> any Fragment)?) {
        let id = UUID().uuidString
        self.id = id
        self.attributes = [:]
        self.events = [:]
        self.content = bodyValue ?? { List() }
        #if os(WASI)
        self.renderer = JSNode(named: Self.name, elementID: id)
        #else
        self.renderer = EmptyRenderer()
        #endif
        
        self.attributes["id"] = { id }
    }

    {{#inits}}
    {{#initEmpty}}
    public init() {  
        self.init(bodyValue: nil)
    }
    {{/initEmpty}}
    {{#initBody}}
    public init(@PageBuilder _ content: @escaping () -> any Fragment) {
        self.init(bodyValue: content)
    }
    {{/initBody}}
    {{#initText}}
    public init(@PageBuilder _ content: @escaping () -> any Fragment) {
        self.init(bodyValue: content)
    }
    {{/initText}}
    {{#initRequired}}
    public init({{#args}}{{alias}}: {{{type}}}{{^last}}, {{/last}}{{/args}}) {
        self.init(bodyValue: nil)

        {{#args}}
        {{#isBinding}}
        self.attributes["{{name}}"] = { {{name}}.wrappedValue.description }
        self.events["{{event}}"] = { eventResult in
            guard case let .{{ltype}}(bindedValue) = eventResult else { return }
            {{name}}.set(bindedValue)
        }
        {{/isBinding}}
        {{^isBinding}}
        self.attributes["{{name}}"] = { {{name}}().description }
        {{/isBinding}}
        {{/args}}
    }
    {{/initRequired}}
    {{#initRequiredWithBody}}
    public init({{#args}}{{alias}}: {{{type}}}, {{/args}}@PageBuilder _ content: @escaping () -> any Fragment) {
        self.init(bodyValue: content)

        {{#args}}
        {{#isBinding}}
        self.attributes["{{name}}"] = { {{name}}.wrappedValue.description }
        self.events["{{event}}"] = { eventResult in
            guard case let .{{ltype}}(bindedValue) = eventResult else { return }
            input.set(bindedValue)
        }
        {{/isBinding}}
        {{^isBinding}}
        self.attributes["{{name}}"] = { {{name}}().description }
        {{/isBinding}}
        {{/args}}
    }
    {{/initRequiredWithBody}}

    {{/inits}}

}

// MARK: - Attributes
public extension {{ctag}} {
    {{#attributes}}
    ///{{description}}
    {{#isWildCard}}
    func {{alias}}(_ name: String, _ value: {{{type}}}) -> Self {
        attribute(.init(name: "{{name}}-\(name)", value: { value().description }))
    }
    {{/isWildCard}}
    {{^isWildCard}}
    func {{alias}}(_ value: {{{type}}}) -> Self {
        attribute(.init(name: "{{name}}", value: { value().description }))
    }
    {{/isWildCard}}

    {{/attributes}}
}