// This file was autogenerated by Shipwright. DO NOT CHANGE.
//
//  {{ctag}}.swift
//


import Sailboat
import SailorShared

#if os(WASI)
import SailorWeb
#else
// if any other target are created
#endif

extension HTML {
    /// {{description}}
    public struct {{ctag}}: {{#head}}HeadElement{{/head}}{{^head}}BodyElement{{/head}} {
        /// name of the html tag associated with this type
        @_spi(Private) public static var name: String { "{{tag}}" }

        /// attributes associated with this type
        @_spi(Private) public var attributes: [String: () -> any AttributeValue]

        /// events associated with this type
        @_spi(Private) public var events: [String: (EventResult) -> Void]

        /// content that is contained by this html element
        @_spi(Private) public var content: () -> any Fragment

        /// renderer that is used to render this element
        @_spi(Private) public var renderer: any Renderable

        @_spi(Private)
        public var body: Never {
            .error()
        }
        
        internal init(bodyValue: (() -> any Fragment)?) {
            self.attributes = [:]
            self.events = [:]
            self.content = bodyValue ?? { List() }
            #if os(WASI)
            self.renderer = JSNode(named: Self.name)
            #else
            self.renderer = EmptyRenderer()
            #endif
        }

        {{#inits}}
        {{#initEmpty}}
        public init() {  
            self.init(bodyValue: nil)
        }
        {{/initEmpty}}
        {{#initBody}}
        public init(@PageBuilder _ content: @escaping () -> any Fragment) {
            self.init(bodyValue: content)
        }
        {{/initBody}}
        {{#initText}}
        public init(_ text: @autoclosure @escaping () -> String) {
            self.init(bodyValue: { List([text()], hash: "") } )
        }
        {{/initText}}
        {{#initRequired}}
        public init({{#args}}{{alias}}: {{{type}}}{{^last}}, {{/last}}{{/args}}) {
            self.init(bodyValue: nil)

            {{#args}}
            {{#isBinding}}
            self.attributes[".{{name}}"] = { {{name}}.wrappedValue.description }
            self.events["{{event}}"] = { eventResult in
                guard case let .{{ltype}}(bindedValue) = eventResult else { return }
                {{name}}.set(bindedValue)
            }
            {{/isBinding}}
            {{^isBinding}}
            self.attributes["{{name}}"] = { {{name}}().description }
            {{/isBinding}}
            {{/args}}
        }
        {{/initRequired}}
        {{#initRequiredWithBody}}
        public init({{#args}}{{alias}}: {{{type}}}, {{/args}}@PageBuilder _ content: @escaping () -> any Fragment) {
            self.init(bodyValue: content)

            {{#args}}
            {{#isBinding}}
            self.attributes[".{{name}}"] = { {{name}}.wrappedValue.description }
            self.events["{{event}}"] = { eventResult in
                guard case let .{{ltype}}(bindedValue) = eventResult else { return }
                {{name}}.set(bindedValue)
            }
            {{/isBinding}}
            {{^isBinding}}
            self.attributes["{{name}}"] = { {{name}}().description }
            {{/isBinding}}
            {{/args}}
        }
        {{/initRequiredWithBody}}
        {{#initRequiredWithText}}
        public init(_ text: @autoclosure @escaping () -> String, {{#args}}{{alias}}: {{{type}}}{{^last}}, {{/last}}{{/args}}) {
            self.init(bodyValue: { List([text()], hash: "") })

            {{#args}}
            {{#isBinding}}
            self.attributes[".{{name}}"] = { {{name}}.wrappedValue.description }
            self.events["{{event}}"] = { eventResult in
                guard case let .{{ltype}}(bindedValue) = eventResult else { return }
                {{name}}.set(bindedValue)
            }
            {{/isBinding}}
            {{^isBinding}}
            self.attributes["{{name}}"] = { {{name}}().description }
            {{/isBinding}}
            {{/args}}
        }
        {{/initRequiredWithText}}

        {{/inits}}

    }
}
// MARK: - Attributes
public extension HTML.{{ctag}} {
    {{#attributes}}
    ///{{description}}
    {{#isWildCard}}
    func `{{alias}}`(_ name: String, _ value: {{{type}}}) -> Self {
        attribute(.init(name: "{{name}}-\(name)", value: { value().description }))
    }
    {{/isWildCard}}
    {{^isWildCard}}
    func `{{alias}}`(_ value: {{{type}}}) -> Self {
        attribute(.init(name: "{{name}}", value: { value().description }))
    }
    {{/isWildCard}}

    {{/attributes}}
}