// This file was autogenerated by Shipwright. DO NOT CHANGE.
//
//  {{ctag}}.swift
//
//  Created by Joshua Davis.
//

import Sailboat

/// {{description}}
public struct {{ctag}}: Element {

    /// name of the html tag associated with this type
    public var name: String { "{{tag}}" }

    /// attributes associated with this type
    public var attributes: [String: String]

    /// events associated with this type
    public var events: [String: (EventResult) -> Void]

    /// content that is contained by this html element
    public var content: TagContent

    public var renderer: some Renderable = JSNode(named: "{{tag}}")

    {{#inits}}
    {{#initEmpty}}
    public init() {   
        self.content = .text("")
        self.attributes = .init()
        self.events = .init()
    }
    {{/initEmpty}}
    {{#initBody}}
    public init(_ attributes: ElementAttributeGroup..., @PageBuilder content: @escaping () -> any Fragment) {
        self.content = .list(content)
        self.attributes = .init()
        self.events = .init()

        for attribute in attributes {
            self.attributes[attribute.name] = attribute.value
        }

    }
    {{/initBody}}
    {{#initText}}
    public init(_ text: String) {
        self.content = .text(text)
        self.attributes = .init()
        self.events = .init()
    }
    {{/initText}}
    {{#initRequired}}
    public init({{#args}}{{alias}}: {{{type}}}, {{/args}}@PageBuilder _ content: @escaping () -> any Fragment) {
        self.content = .text("")
        self.attributes = .init()
        self.events = .init()

        {{#args}}
        {{#isBinding}}
        self.attributes["{{name}}"] = {{name}}.wrappedValue.description
        self.events["{{event}}"] = { eventResult in
            guard case let .{{ltype}}(bindedValue) = eventResult else { return }
            {{name}}.set(bindedValue)
        }
        {{/isBinding}}
        {{^isBinding}}
        self.attributes["{{name}}"] = {{name}}.description
        {{/isBinding}}
        {{/args}}
        
    }
    {{/initRequired}}
    {{#initRequiredWithBody}}
    public init({{#args}}{{alias}}: {{{type}}}, {{/args}}@PageBuilder content: @escaping () -> any Fragment) {
        self.content = .list(content)
        self.attributes = .init()
        self.events = .init()

        {{#args}}
        {{#isBinding}}
        self.attributes["{{name}}"] = {{name}}.wrappedValue.description
        self.events["{{event}}"] = { eventResult in
            guard case let .{{ltype}}(bindedValue) = eventResult else { return }
            input.set(bindedValue)
        }
        {{/isBinding}}
        {{^isBinding}}
        self.attributes["{{name}}"] = {{name}}.description
        {{/isBinding}}
        {{/args}}
        
    }
    {{/initRequiredWithBody}}

    {{/inits}}

    internal func dumpDependencies() {
        
        SailorGlobal.manager.dumpTo(element: self.id)
    }
}

// MARK: - Attributes
public extension {{ctag}} {
    {{#attributes}}
    ///{{description}}
    {{#isWildCard}}
    func {{alias}}(_ name: String, _ value: {{type}}) -> Self {
        attribute(.init(name: "{{name}}-name", value: value.description))
    }
    {{/isWildCard}}
    {{^isWildCard}}
    func {{alias}}(_ value: {{type}}) -> Self {
        attribute(.init(name: "{{name}}", value: value.description))
    }
    {{/isWildCard}}

    {{/attributes}}
}